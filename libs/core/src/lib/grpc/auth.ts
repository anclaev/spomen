// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v3.20.3
// source: auth.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js'
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'

export const protobufPackage = 'auth'

export interface LoginWithPasswordPayload {
  login?: string | undefined
  email?: string | undefined
  password: string
}

export interface LoginWithPasskeyPayload {
  login?: string | undefined
  email?: string | undefined
  passkey: string
}

export interface Tokens {
  accessToken: string
  refreshToken: string
}

export interface Status {
  status: boolean
}

export const AUTH_PACKAGE_NAME = 'auth'

export interface AuthServiceClient {
  loginWithPassword(
    request: LoginWithPasswordPayload,
    metadata?: Metadata
  ): Observable<Tokens>

  loginWithPasskey(
    request: LoginWithPasskeyPayload,
    metadata?: Metadata
  ): Observable<Tokens>
}

export interface AuthServiceController {
  loginWithPassword(
    request: LoginWithPasswordPayload,
    metadata?: Metadata
  ): Promise<Tokens> | Observable<Tokens> | Tokens

  loginWithPasskey(
    request: LoginWithPasskeyPayload,
    metadata?: Metadata
  ): Promise<Tokens> | Observable<Tokens> | Tokens
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['loginWithPassword', 'loginWithPasskey']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
  }
}

export const AUTH_SERVICE_NAME = 'AuthService'
